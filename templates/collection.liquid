

<div class='row options-style'>
  <ul class='large-block-grid-4'>
    <li><a href="#" data-dropdown='brand'>BRAND</a></li>
    <li><a href="#" data-dropdown='bean'>BEAN CHARACTERISTICS</a></li>
    <li><a href="#" data-dropdown='flavor-filters'>FLAVOR PROFILE</a></li>
    <li><a href="#" data-dropdown='sort-filters'>SORT BY</a></li>
  </ul>
</div>

    <ul class='f-dropdown options' id='sort-filters' data-dropdown-content data-option-key='sortBy'>
      <li><a href='#options' class='option-value' data-option-value='percent'></a> Percent</li>
      <li><a href='#options' class='option-value' data-option-value='popularity'></a> Popularity</li>
    </ul>
    <!--<ul class='option-set large-2 columns' id='batch-filters' data-option-key='filter'>
      <label> Batch size: </label>
      <li><a href='#options' class='option-value' data-option-value='.artisan'></a> Small-batch</li>
      <li><a href='#options' class='option-value' data-option-value='*'></a> Large-batch</li>
    </ul>-->
    <ul class='f-dropdown options' id='region-filters' data-dropdown-content data-option-key='filter'>
      <li><a href='#options' class='option-value' data-option-value='.NE'></a> Northeast</li>
      <li><a href='#options' class='option-value' data-option-value='.SE'></a> Southeast</li>
      <li><a href='#options' class='option-value' data-option-value='.NW'></a> Northwest</li>
      <li><a href='#options' class='option-value' data-option-value='.SW'></a> Southwest</li>
      <li><a href='#options' class='option-value' data-option-value='.MW'></a> Midwest</li>
    </ul>
    <ul class='f-dropdown options' id='flavor-filters' data-dropdown-content data-option-key='filter'>
      <li><a class='option-value' id='chocolatey' data-option-value='.chocolatey'>Chocolatey</a></li>
      <li><a class='option-value' id='citrus' data-option-value='.citrus'>Citrus</a></li>
      <li><a class='option-value' id='fruity' data-option-value='.fruity'>Fruity</a></li>
      <li><a class='option-value' id='floral' data-option-value='.floral'>Floral</a></li>
      <li><a class='option-value' id='earthy' data-option-value='.earthy'>Earthy</a></li>
      <li><a class='option-value' id='nutty' data-option-value='.nutty'>Nutty</a></li>
      <li><a class='option-value' id='spicy' data-option-value='.spicy'>Spicy</a></li>
      <li><a class='option-value' id='creamy' data-option-value='.creamy'>Creamy</a></li>
    </ul>

<div id="col-main" class="{{ collection.handle }}">
{% assign gridFlag = false %}

<div class='row' id='filter-breadcrumbs'>
  <div id='show-filter-choices'></div>
  <div id='nav-select'>
    <button class='grid-select'>Grid</button>
    <button class='bars'>Bars</button>
  </div>
</div>


  <div id='bars-view'>
    {% paginate collection.products by 50 %}
      {% if collection.products.size > 0 %}
        <div class="product-grid clearfix isotope">
          {% for product in collection.products %}
            <div class='item {% for tag in product.tags %} {{tag}} {% endfor %}'>
              {% include 'product-grid-item' %}
            </div>
          {% endfor %}
        </div>

        {% include 'pagination' %}

      {% else %}    
        <strong>No products found in this collection.</strong>
      {% endif %}
    {% endpaginate %}

  </div>

  <div id='grid-view' style='display:none'>
    <br>
    {% paginate collection.products by 10 %}
      {% if collection.products.size > 0 %}
        <div class="product-grid-grid clearfix">
          {% for product in collection.products %}
            <div class='{% for tag in product.tags %} {{tag}} {% endfor %}'>
              {% include 'product-grid-item-OLD' %}
            </div>
          {% endfor %}
        </div>

        {% include 'pagination' %}
      
      {% else %}    
        <strong>No products found in this collection.</strong>
      {% endif %}
    {% endpaginate %}
  </div>
  </section>
  
</div> <!-- /#col-main -->

<script type="text/javascript">

  // scratch JS
  $('.dt-size').parent().remove();
  $('.hor1').parent().remove();
  $('.ver1').parent().remove();

  var store_product_hash = new Array();
  var i = 0;

  {% for item in collection.products %}
    store_product_hash.push('{{ item.handle }}');
    i++;
   // console.log(i);
  {% endfor %}

  console.log(store_product_hash)

  var products_count = {{ collection.products_count }},
      pages_count = Math.ceil(products_count / 50),   // I'm actually paginating by 25 here
      base_url = location.pathname + "?page=",       // generate the paginated URLs
      i = 2;

  console.log('products_count ' + products_count);
  console.log('pages_count ' + pages_count);
  console.log('base_url ' + base_url);

  if (pages_count > 1){
    $('#pagination').hide(); // hide pagination links, originally left in to keep it unobtrusive

    console.log('in mult pages ')
    var getItems = function(){
      collection = $('.product-grid');
      console.log('getting')
      for (i = 2; i <= pages_count;i++ ){     // loop through each paginated page
        $.get(base_url + i, function(data){   // get all the html
          var items = $(data).find('.item');  // find just the products
          console.log(items);
          //collection.append(items);  // append them to the page
          //set_prod_hover_event();
        });
      }
    }

    getItems();
  }

  // end of scratch JS

  // add to masonry
  $(function(){
    $('.product-grid').isotope({
      itemSelector :'.item',
      layoutMode: 'masonry',
      masonry: {
        columnWidth: 1
      },
      getSortData : {
        percent : function ( $elem ) {
          return $elem.attr('data-percent');
        }
      }
    });
  });

  $('.bars').click(function(){
    if ($('#grid-view').is(':visible')){
      $('#grid-view').hide();
    }
    $('#bars-view').show();
    $('.product-grid').isotope('reLayout');
  })
  $('.grid-select').click(function(){
    if ($('#bars-view').is(':visible')){
      $('#bars-view').hide();
    }
    $('#grid-view').show();
  })

  // if a filter is clicked
  // register which filters are active
  // make sure whatever product is on the page has that tag
  // repopulate page and masonry-ize it

  var $option_values = $('.option-value');
  var options_hash = new HashTable({});
  var filters = [];
  var sorters = [];

  //console.log($option_values)

  $option_values.on('click', apply_filter);

  // if any of the filters are clicked
  function apply_filter(){ 
      //console.log('this div '+ $(this).attr('class'));

    // find out if it's a filter or a sorter
    $option_key = $(this).parent().parent();

    //console.log('option key ' + $option_key.attr('class'))
    /////
    // REMOVE
    /////
    // if it's already been clicked, unselect it and remove it from the Hash
    if($(this).hasClass('selected')){
      $(this).removeClass('selected');
      $(this).css('background-color', 'white')

      // if a filter has been clicked
      if ($option_key.attr('data-option-key')=='filter'){
        value_index = filters.indexOf($(this).attr('data-option-value'));
        filters.splice(value_index,1);

        var filter_string = getFilterString(filters);

        options_hash.setItem($option_key.attr('data-option-key'), filter_string);
      }
      else{ // if a sorter has been clicked
        $(this).parent()
        options_hash.removeItem($option_key.attr('data-option-key'));
        options_hash.removeItem('sortAscending');
      }
    }
    else { 
      /////
      //  ADD
      /////
      // if it hasn't been clicked, select it and add it to the Hash
      // TODO: put a check beside the filters that have been clicked
      $(this).addClass('selected');
      $(this).css('background-color', 'white')
      if ($option_key.attr('data-option-key')=='filter'){
        filters.push($(this).attr('data-option-value'))
        var filter_string = getFilterString(filters);

        //console.log('filter clicked ' + filter_string)

        options_hash.setItem($option_key.attr('data-option-key'), filter_string);
      }
      else {
        options_hash.setItem($option_key.attr('data-option-key'), $(this).attr('data-option-value'));
        options_hash.setItem('sortAscending', false);
      }
    }
      // run the filter/sorter and reload the grid
      var values = options_hash.values();
      //console.log('values ' + values)
      var keys = options_hash.keys();
      //console.log(keys)

      var filter_list_item;
      $('#show-filter-choices').html('');

      $.each(filters, function(i,item){
        filter_list_item = item.split('.')[1];
        //console.log(filter_list_item.toUpperCase());
        $('#show-filter-choices').append('<span data-option-key=\'filter\'>' +filter_list_item.toUpperCase() + ' <span><a class="inline-summary" style="cursor:pointer" data-option-value=\''+item+'\'>X</a></span></span>'+' ');
        $('.inline-summary').on('click', remove_filter);
      })

      $.each(values, function(i,v){
        //console.log('key ' + keys[i] + ' value ' + v)
        var options = {};
        options[keys[i]] = v;
        $('.product-grid').isotope(options)
    });
  }

  function remove_filter(){
    //alert('remove')
     var $option_key = $(this).parent().parent();
     var filter_item = $(this).attr('data-option-value').split('.')[1];
     var $filter_option = $('#'+filter_item);

    //console.log('option key ' + $option_key.attr('data-option-key'))
    /////
    // REMOVE
    /////
    // if it's already been clicked, unselect it and remove it from the Hash
    if($filter_option.hasClass('selected')){
      $filter_option.removeClass('selected');
      $filter_option.css('background-color', 'white')

      // if a filter has been clicked
      if ($option_key.attr('data-option-key')=='filter'){
        value_index = filters.indexOf($(this).attr('data-option-value'));
        filters.splice(value_index,1);

        var filter_string = getFilterString(filters);

        options_hash.setItem($option_key.attr('data-option-key'), filter_string);
      }
      else{ // if a sorter has been clicked
        options_hash.removeItem($option_key.attr('data-option-key'));
        options_hash.removeItem('sortAscending');
      }
    }

    var values = options_hash.values();
    //console.log('values ' + values)
    var keys = options_hash.keys();
    //console.log(keys)

    $.each(values, function(i,v){
      //console.log('key ' + keys[i] + ' value ' + v)
      var options = {};
      options[keys[i]] = v;
      $('.product-grid').isotope(options)
    });

    $option_key.remove();
  }

  // Functions

  function getFilterString(filters) {
    var hold_filters = '';
    $.each(filters, function(i,v) {
      hold_filters = hold_filters +' '+ v;
    })
    return hold_filters;
  }


  // Classes 

  function HashTable(obj)
  {
    this.length = 0;
    this.items = {};
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            this.items[p] = obj[p];
            this.length++;
        }
    }

    this.setItem = function(key, value)
    {
        var previous = undefined;
        if (this.hasItem(key)) {
            previous = this.items[key];
        }
        else {
            this.length++;
        }
        this.items[key] = value;
        return previous;
    }

    this.getItem = function(key) {
        return this.hasItem(key) ? this.items[key] : undefined;
    }

    this.hasItem = function(key)
    {
        return this.items.hasOwnProperty(key);
    }
   
    this.removeItem = function(key)
    {
        if (this.hasItem(key)) {
            previous = this.items[key];
            this.length--;
            delete this.items[key];
            return previous;
        }
        else {
            return undefined;
        }
    }

    this.keys = function()
    {
        var keys = [];
        for (var k in this.items) {
            if (this.hasItem(k)) {
                keys.push(k);
            }
        }
        return keys;
    }

    this.values = function()
    {
        var values = [];
        for (var k in this.items) {
            if (this.hasItem(k)) {
                values.push(this.items[k]);
            }
        }
        return values;
    }

    this.each = function(fn) {
        for (var k in this.items) {
            if (this.hasItem(k)) {
                fn(k, this.items[k]);
            }
        }
    }

    this.clear = function()
    {
        this.items = {}
        this.length = 0;
    }
  }
</script>