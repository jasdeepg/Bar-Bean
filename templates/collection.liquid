<div id="col-main" class="{{ collection.handle }}">
{% assign gridFlag = false %}

  <div id='nav-select'>
    <button class='grid-select'>Grid</button>
    <button class='bars'>Bars</button>
  </div>

  <div id='filters'>
    <div class='options row'>
      <ul class='option-set large-2 columns' id='sort-filters' data-option-key='sortBy'>
        <label> Sort by: </label>
        <li><a href='#options' class='option-value' data-option-value='percent'></a> Percent</li>
        <li><a href='#options' class='option-value' data-option-value='popularity'></a> Popularity</li>
      </ul>
      <!--<ul class='option-set large-2 columns' id='batch-filters' data-option-key='filter'>
        <label> Batch size: </label>
        <li><a href='#options' class='option-value' data-option-value='.artisan'></a> Small-batch</li>
        <li><a href='#options' class='option-value' data-option-value='*'></a> Large-batch</li>
      </ul>-->
      <ul class='option-set large-5 columns' id='region-filters' data-option-key='filter'>
        <label> Bar produced in: </label>
        <li><a href='#options' class='option-value' data-option-value='.NE'></a> Northeast</li>
        <li><a href='#options' class='option-value' data-option-value='.SE'></a> Southeast</li>
        <li><a href='#options' class='option-value' data-option-value='.NW'></a> Northwest</li>
        <li><a href='#options' class='option-value' data-option-value='.SW'></a> Southwest</li>
        <li><a href='#options' class='option-value' data-option-value='.MW'></a> Midwest</li>
      </ul>
      <ul class='option-set large-5 columns' id='region-filters' data-option-key='filter'>
        <label> Flavor: </label>
        <li><a href='#options' class='option-value' data-option-value='.chocolatey'></a> Chocolatey</li>
        <li><a href='#options' class='option-value' data-option-value='.citrus'></a> Citrus</li>
        <li><a href='#options' class='option-value' data-option-value='.fruity'></a> Fruity</li>
        <li><a href='#options' class='option-value' data-option-value='.floral'></a> Floral</li>
        <li><a href='#options' class='option-value' data-option-value='.earthy'></a> Earthy</li>
        <li><a href='#options' class='option-value' data-option-value='.nutty'></a> Nutty</li>
        <li><a href='#options' class='option-value' data-option-value='.spicy'></a> Spicy</li>
      </ul>
    </div>
  </div>

  <div id='bars-view'>
      {% if collection.products.size > 0 %}
        <div class="product-grid clearfix isotope">
          {% for product in collection.products %}
            <div class='item {% for tag in product.tags %} {{tag}} {% endfor %}'>
              {% include 'product-grid-item' %}
            </div>
          {% endfor %}
        </div>
      {% else %}    
        <strong>No products found in this collection.</strong>
      {% endif %}
  </div>

  <div id='grid-view' style='display:none'>
    <br>
    {% paginate collection.products by 10 %}
      {% if collection.products.size > 0 %}
        <div class="product-grid-grid clearfix">
          {% for product in collection.products %}
            <div class='{% for tag in product.tags %} {{tag}} {% endfor %}'>
              {% include 'product-grid-item-OLD' %}
            </div>
          {% endfor %}
        </div>

        {% include 'pagination' %}
      
      {% else %}    
        <strong>No products found in this collection.</strong>
      {% endif %}
    {% endpaginate %}
  </div>
  </section>
  
</div> <!-- /#col-main -->

<script type="text/javascript">
  $(function(){
    $('.product-grid').isotope({
      itemSelector :'.item',
      masonry: {
        columnWidth: 1
      },
      getSortData : {
        percent : function ( $elem ) {
          return $elem.attr('data-percent');
        }
      }
    });
  });

  $('.bars').click(function(){
    if ($('#grid-view').is(':visible')){
      $('#grid-view').hide();
    }
    $('#bars-view').show();
    $('.product-grid').isotope('reLayout');
  })
  $('.grid-select').click(function(){
    if ($('#bars-view').is(':visible')){
      $('#bars-view').hide();
    }
    $('#grid-view').show();
  })

  $('.product-grid').children('.item').children('.product-grid-item').each(function(){
    var dataset=[1,5,'+', 'Learn'];
    var w = $(this).width(),
        h = $(this).height(), 
        sep = 70; 

    var prod_id = $(this)[0].getAttribute('data-id');

    var links = ['quantity=1&id='+prod_id, 'quantity=5&id='+prod_id];

    console.log(w+' '+h);

    var div_id = $(this).attr('id');

    console.log(div_id);

    var canvas = d3.select('#'+div_id)
            .append('svg')
            .attr('width', w)
            .attr('height', h)

    var elemBlock = canvas.selectAll('g')
              .data(dataset);

    if (w > h){
      var elemBlockEnter = elemBlock.enter()
                            .append('g')
                            .attr('transform', function(d,i) {console.log('(data, i) '+ '('+d+','+i+') '+ ' (w, sep, i) ' + '('+w+','+sep+','+i+')'+' transform: '+ (((0.5)*w-sep)+i*sep)); if (i>2){return 'translate('+w/2+','+0.8*h+')';}return 'translate('+(((0.5)*w-sep)+(i*sep))+','+h/2+')';})
                            .attr('display','none')
                            .attr('class', 'hover-'+div_id)
    }
    else{
      var elemBlockEnter = elemBlock.enter()
                            .append('g')
                            .attr('transform', function(d,i) {if (i>2){ return 'translate('+w/2+','+(((0.5)*h-(sep/1.2))+(i*(sep/1.2)))+')';} return 'translate('+w/2+','+(((0.5)*h-sep)+(i*sep))+')';})
                            .attr('display','none')
                            .attr('class', 'hover-'+div_id)
    }

    var circle = elemBlockEnter.append('circle')
            .attr('r', function(d,i){ if (i>2){return 0;} return 25;})
            .style('fill', 'black')
            .attr('stroke', 'white')
            .attr('stroke-width', '2px')

    elemBlockEnter.append('svg:text')
      .attr('text-anchor', 'middle')
      .style('fill', 'white')
      .attr('background-color', 'green')
      .attr('font-size', function(d,i){if (i>2){return '14px';} return '28px';})
      .attr('dy', '8px')
      .text(function(d,i){return d;});

    elemBlockEnter.append('rect')
      .attr('transform', 'translate(0,'+0.8*h+')')
      .attr('background-color', 'black')
      .attr('width', function(d,i){if (i>2){ return w} return 0;} )
      .attr('height', '20px')


    var learnBlock = canvas.selectAll('g-learn')
                            .data([1,2]);

    var learnBlockEnter = learnBlock.enter()
                                .append('g-learn')
                                .attr('transform', 'translate('+w/2+','+(0.8)*h+')');

    learnBlockEnter.append('svg:text')
      .attr('text-anchor', 'middle')
      .style('fill', 'white')
      .attr('font-size', '28px')
      .attr('dy', '8px')
      .text('Learn');
  })

  $('.product-grid-item').hover(function(){
    var prod_handle = $(this)[0].getAttribute('data-product');
    var prod_url = $(this)[0].getAttribute('data-url');
    var $item_holder = $(this)

    $('.hover-'+$(this).attr('id')).fadeIn(250);

  }).mouseleave(function(){
    $('.hover-'+$(this).attr('id')).fadeOut(250);
  })

  // if a filter is clicked
  // register which filters are active
  // make sure whatever product is on the page has that tag
  // repopulate page and masonry-ize it

  $option_values = $('.options a');
  var options_hash = new HashTable({});
  var filters = [];
  var sorters = [];

  // if any of the filters are clicked
  $option_values.click(function(){ 
    // find out if it's a filter or a sorter
    $option_key = $(this).parent().parent();

    /////
    // REMOVE
    /////
    // if it's already been clicked, unselect it and remove it from the Hash
    if($(this).hasClass('selected')){
      $(this).removeClass('selected');
      $(this).css('background-color', 'white')

      // if a filter has been clicked
      if ($option_key.attr('data-option-key')=='filter'){
        value_index = filters.indexOf($(this).attr('data-option-value'));
        filters.splice(value_index,1);

        var filter_string = getFilterString(filters);

        options_hash.setItem($option_key.attr('data-option-key'), filter_string);
      }
      else{ // if a sorter has been clicked
        $(this).parent()
        options_hash.removeItem($option_key.attr('data-option-key'));
        options_hash.removeItem('sortAscending');
      }
    }
    else { 
      /////
      //  ADD
      /////
      // if it hasn't been clicked, select it and add it to the Hash
      $(this).addClass('selected');
      $(this).css('background-color', 'black')
      if ($option_key.attr('data-option-key')=='filter'){
        filters.push($(this).attr('data-option-value'))
        var filter_string = getFilterString(filters);

        console.log('filter clicked ' + filter_string)

        options_hash.setItem($option_key.attr('data-option-key'), filter_string);
      }
      else {
        options_hash.setItem($option_key.attr('data-option-key'), $(this).attr('data-option-value'));
        options_hash.setItem('sortAscending', false);
      }
    }
    // run the filter/sorter and reload the grid
      var values = options_hash.values();
      console.log(values)
      var keys = options_hash.keys();
      console.log(keys)
      $.each(values, function(i,v){
        console.log('key ' + keys[i] + ' value ' + v)
        var options = {};
        options[keys[i]] = v;
        $('.product-grid').isotope(options)
    });
  })

  // Functions

  function getFilterString(filters) {
    var hold_filters = '';
    $.each(filters, function(i,v) {
      hold_filters = hold_filters +' '+ v;
    })
    return hold_filters;
  }


  // Classes 

  function HashTable(obj)
  {
    this.length = 0;
    this.items = {};
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            this.items[p] = obj[p];
            this.length++;
        }
    }

    this.setItem = function(key, value)
    {
        var previous = undefined;
        if (this.hasItem(key)) {
            previous = this.items[key];
        }
        else {
            this.length++;
        }
        this.items[key] = value;
        return previous;
    }

    this.getItem = function(key) {
        return this.hasItem(key) ? this.items[key] : undefined;
    }

    this.hasItem = function(key)
    {
        return this.items.hasOwnProperty(key);
    }
   
    this.removeItem = function(key)
    {
        if (this.hasItem(key)) {
            previous = this.items[key];
            this.length--;
            delete this.items[key];
            return previous;
        }
        else {
            return undefined;
        }
    }

    this.keys = function()
    {
        var keys = [];
        for (var k in this.items) {
            if (this.hasItem(k)) {
                keys.push(k);
            }
        }
        return keys;
    }

    this.values = function()
    {
        var values = [];
        for (var k in this.items) {
            if (this.hasItem(k)) {
                values.push(this.items[k]);
            }
        }
        return values;
    }

    this.each = function(fn) {
        for (var k in this.items) {
            if (this.hasItem(k)) {
                fn(k, this.items[k]);
            }
        }
    }

    this.clear = function()
    {
        this.items = {}
        this.length = 0;
    }
  }
</script>